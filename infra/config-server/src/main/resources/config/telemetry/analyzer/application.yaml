spring:
  application:
    name: analyzer
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/postgres}
    driver-class-name: org.postgresql.Driver
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:postgres}
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none
      default_schema: analyzer
    sql:
      init:
        mode: always
        schema-locations: classpath:schema.sql
        continue-on-error: false
        separator: ";"
        encoding: UTF-8
  sql:
    init:
      mode: always
      schema-locations: classpath:schema.sql
      continue-on-error: false
      separator: ";"
      encoding: UTF-8

kafka:
  bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
  topics:
    sensor-snapshots: telemetry.snapshots.v1
    hub-events: telemetry.hubs.v1
  consumer:
    snapshot-group-id: analyzer-snapshot-consumer-group
    hub-event-group-id: analyzer-hub-consumer-group
    auto-offset-reset: earliest
    enable-auto-commit: false
    consume-timeout: 500
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value-deserializers:
      sensors-snapshot: ru.yandex.practicum.kafka.telemetry.serialization.SensorsSnapshotDeserializer
      hub-event: ru.yandex.practicum.kafka.telemetry.serialization.HubEventDeserializer

grpc:
  client:
    hub-router:
      address: 'static://localhost:59090'
      enableKeepAlive: true
      keepAliveWithoutCalls: true
      negotiationType: plaintext

logging:
  level:
    ru.practicum: DEBUG
    org.springframework.kafka: INFO